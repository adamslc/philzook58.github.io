I"˜<p>Iâ€™ve been trying to figure out Kan Extensions</p>

<p>Ralf Hinze on Kan Extensions</p>

<p><a href="https://www.cs.ox.ac.uk/ralf.hinze/Kan.pdf">https://www.cs.ox.ac.uk/ralf.hinze/Kan.pdf</a></p>

<p>But while doing that I went down a rabbit hole on String Diagrams</p>

<p>This post is the first one on String Diagrams that made sense to me.</p>

<p><a href="https://parametricity.com/posts/2015-07-18-braids.html">https://parametricity.com/posts/2015-07-18-braids.html</a></p>

<p>I had seen this stuff before, but I hadnâ€™t appreciated it until I saw what Haskell expressions it showed equivalence between. They are not obvious equivalences</p>

<p>This seems like a very useful video on this topic.</p>

<p>https://skillsmatter.com/skillscasts/8807-categories-and-string-diagrams</p>

<p>In Summary, it is an excellent notation for talking about transformations of a long sequence of composed FunctorsÂ  F G H â€¦ into some other long sequence of Functors. The conversion of functors runs from up to down. The composition of functors procedes left to right.Â  F eta is the fmap of eta, and eta F is eta with the forallâ€™ed type unified to be of the form F a.</p>

<table>
  <tbody>
    <tr>
      <td>Adjunctions L -</td>
      <td>R are asymmetric between cups and caps. L is on the left in cups and on the right in caps. Thatâ€™s what makes squiggles pull straightable</td>
    </tr>
  </tbody>
</table>

<p>I think I have an interesting idea for a linear algebra library based on this stuff</p>

<p>John Baez and Mike Stayâ€™s Rosetta Stone (A touch stone I keep returning to)</p>

<p>math.ucr.edu/home/baez/rosetta.pdf</p>

<p>Dan Piponi gave a talk which is another touch stone of mine that I come back to again and again. There is a set of corresponding blog posts.</p>

<p>https://vimeo.com/6590617</p>

<p>Other resources:</p>

<p>NCatLab article</p>

<p><a href="https://ncatlab.org/nlab/show/string+diagram">https://ncatlab.org/nlab/show/string+diagram</a></p>

<p>John Baez hosted seminars</p>

<p><a href="http://www.math.ucr.edu/home/baez/QG.html">http://www.math.ucr.edu/home/baez/QG.html</a></p>

<p>Catsters</p>

<p><a href="https://www.youtube.com/view_play_list?p=50ABC4792BD0A086">https://www.youtube.com/view_play_list?p=50ABC4792BD0A086</a></p>

<p>https://www.youtube.com/watch?v=V4m8x6C7pWI</p>

<p>Dan Marsdenâ€™s Article</p>

<p>https://arxiv.org/abs/1401.7220</p>

<p>Marsden and Hinze have been collaborating</p>

<p>events.inf.ed.ac.uk/wf2016/slides/hinze.pdf</p>

<p>https://link.springer.com/chapter/10.1007/978-3-319-30936-1_8</p>

<p>Stephen Diehl on Adjunctions</p>

<p>http://www.stephendiehl.com/posts/adjunctions.html</p>

<p>A Section From an old Oregon Programming Language Summer School (a rich set of resources)</p>

<p>https://www.youtube.com/playlist?list=PLGCr8P_YncjWX6YHOq1-SyyP7zf4a_E_E</p>

<p>Marsden and Hinze have been collaborating</p>

<p>events.inf.ed.ac.uk/wf2016/slides/hinze.pdf</p>

<p>https://link.springer.com/chapter/10.1007/978-3-319-30936-1_8</p>

<p>Mike Stay doing a very interesting series of Category Theory in Javascript. He uses contracts in place of types. Defeats one of the big points of types (static analysis), but still pretty cool</p>

<p>https://www.youtube.com/watch?v=i8_Ae6VUF0I</p>

<p>https://www.youtube.com/watch?v=cOjmaFbnsyY</p>

<p>I think that about covers everything I know about.</p>

<p>Oh yeah, there is the whole Coecke and Abramsky categorical quantum mechanics stuff too.</p>
:ET