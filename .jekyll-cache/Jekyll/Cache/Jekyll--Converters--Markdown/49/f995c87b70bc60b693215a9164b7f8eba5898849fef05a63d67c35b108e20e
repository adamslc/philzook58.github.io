I"d)<p>Floating points are nice and all. You can get pretty far pretending they are actually numbers. But they don’t obey some mathematical properties that feel pretty obvious. A classic to glance through is “What Every Computer Scientist Should Know About Floating-Point Arithmetic” <a href="https://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html">https://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html</a></p>

<p>We can check some properties with z3py. Here are a couple simple properties that succeed for mathematical integers and reals, but fail for floating point</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">z3</span> <span class="kn">import</span> <span class="o">*</span>
<span class="k">def</span> <span class="nf">numbery_proofs</span><span class="p">(</span><span class="n">sort</span><span class="p">):</span>
    
    <span class="n">x</span> <span class="o">=</span> <span class="n">Const</span><span class="p">(</span><span class="s">"x"</span><span class="p">,</span> <span class="n">sort</span><span class="p">)</span>
    <span class="n">y</span> <span class="o">=</span> <span class="n">Const</span><span class="p">(</span><span class="s">"y"</span><span class="p">,</span> <span class="n">sort</span><span class="p">)</span>
    <span class="n">z</span> <span class="o">=</span> <span class="n">Const</span><span class="p">(</span><span class="s">"z"</span><span class="p">,</span> <span class="n">sort</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Commutativity"</span><span class="p">)</span>
    <span class="n">prove</span><span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">==</span> <span class="n">y</span> <span class="o">+</span> <span class="n">x</span><span class="p">)</span> <span class="c1">#Commutativity
</span>    <span class="k">print</span><span class="p">(</span><span class="s">"Associativity"</span><span class="p">)</span>
    <span class="n">prove</span><span class="p">(((</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">)</span> <span class="o">+</span> <span class="n">z</span><span class="p">)</span> <span class="o">==</span> <span class="p">((</span><span class="n">x</span> <span class="o">+</span> <span class="p">(</span><span class="n">y</span> <span class="o">+</span> <span class="n">z</span><span class="p">))))</span> <span class="c1">#associativity
</span>    <span class="k">print</span><span class="p">(</span><span class="s">"Additive Identity"</span><span class="p">)</span>
    <span class="n">prove</span><span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="mi">0</span> <span class="o">==</span> <span class="n">x</span><span class="p">)</span> <span class="c1"># 0 additive identity
</span>    <span class="k">print</span><span class="p">(</span><span class="s">"Multiplicative Identity"</span><span class="p">)</span>
    <span class="n">prove</span><span class="p">(</span><span class="mi">1</span> <span class="o">*</span> <span class="n">x</span> <span class="o">==</span> <span class="n">x</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Trichotomy"</span><span class="p">)</span>
    <span class="n">prove</span><span class="p">(</span><span class="n">Or</span><span class="p">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">,</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">0</span><span class="p">))</span> <span class="c1">#trichotomy
</span>    <span class="k">print</span><span class="p">(</span><span class="s">"Distributivity"</span><span class="p">)</span>
    <span class="n">prove</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="p">(</span><span class="n">y</span> <span class="o">+</span> <span class="n">z</span><span class="p">)</span> <span class="o">==</span> <span class="n">x</span> <span class="o">*</span> <span class="n">y</span> <span class="o">+</span> <span class="n">x</span> <span class="o">*</span> <span class="n">z</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Square positive"</span><span class="p">)</span>
    <span class="n">prove</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">x</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Ints -----------------"</span><span class="p">)</span>
<span class="n">numbery_proofs</span><span class="p">(</span><span class="n">IntSort</span><span class="p">())</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Reals ---------------"</span><span class="p">)</span>
<span class="n">numbery_proofs</span><span class="p">(</span><span class="n">RealSort</span><span class="p">())</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Float----------------"</span><span class="p">)</span>
<span class="n">numbery_proofs</span><span class="p">(</span><span class="n">Float16</span><span class="p">())</span>


<span class="s">''' Output
Ints -----------------
Commutativity
proved
Associativity
proved
Additive Identity
proved
Multiplicative Identity
proved
Trichotomy
proved
Distributivity
proved
Square positive
proved
Reals ---------------
Commutativity
proved
Associativity
proved
Additive Identity
proved
Multiplicative Identity
proved
Trichotomy
proved
Distributivity
proved
Square positive
proved
Float----------------
Commutativity
proved
Associativity
counterexample
[z = -1.9375*(2**8),
 y = 1.0009765625*(2**14),
 x = 1.5224609375*(2**4)]
Additive Identity
counterexample
[x = -0.0]
Multiplicative Identity
proved
Trichotomy
counterexample
[x = NaN]
Distributivity
counterexample
[z = -1.0029296875*(2**-2),
 y = 1.01171875*(2**-10),
 x = -1.4833984375*(2**8)]
Square positive
counterexample
[x = NaN]
'''</span>
</code></pre></div></div>

<p>I recently saw on twitter a reference to a Sylvie Boldo paper <a href="https://hal.archives-ouvertes.fr/hal-01148409/">https://hal.archives-ouvertes.fr/hal-01148409/</a> “Stupid is as Stupid Does: Taking the Square Root of the Square of a Floating-Point Number”.</p>

<p><a href="https://twitter.com/fatlimey/status/1225496023553978369?s=20">https://twitter.com/fatlimey/status/1225496023553978369?s=20</a></p>

<p>In it, she uses FlocQ and Coq to prove a somewhat surprising result that the naive formula $ \sqrt{x^2} = |x|$ actually is correct for the right rounding mode of floating point, something I wouldn’t have guessed.</p>

<p>Z3 confirms for <code class="language-plaintext highlighter-rouge">Float16</code>. I can’t get <code class="language-plaintext highlighter-rouge">Float32</code> to come back after even a day on a fairly beefy computer. If I use <code class="language-plaintext highlighter-rouge">FPSort(ebits,sbits)</code> rather than a standard size, it just comes back unknown, so i can’t really see where the cutoff size is. This does not bode well for checking properties of floating point in z3 in general. I think a brute force for loop check of 32 bit float properties is feasible. It might even be pretty fast. To some degree, if z3 is taking forever to find a counterexample, I wonder to what to degree the property is probably true.</p>

<p>If anyone has suggestions, I’m all ears.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">z3</span> <span class="kn">import</span> <span class="o">*</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">FP</span><span class="p">(</span><span class="s">"x"</span><span class="p">,</span> <span class="n">Float16</span><span class="p">())</span>
<span class="n">rm</span> <span class="o">=</span> <span class="n">RNE</span><span class="p">()</span> <span class="c1"># Rounding Nearest Ties to Even
</span><span class="n">x2</span> <span class="o">=</span> <span class="n">fpMul</span><span class="p">(</span><span class="n">rm</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
<span class="n">absx1</span> <span class="o">=</span> <span class="n">fpSqrt</span><span class="p">(</span><span class="n">rm</span><span class="p">,</span> <span class="n">x2</span><span class="p">)</span>
<span class="n">absx2</span> <span class="o">=</span> <span class="n">fpAbs</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>

<span class="n">s</span> <span class="o">=</span> <span class="n">Solver</span><span class="p">()</span>
<span class="n">s</span><span class="p">.</span><span class="n">add</span><span class="p">(</span> <span class="mf">0.01</span> <span class="o">&lt;=</span> <span class="n">x</span><span class="p">,</span> <span class="n">x</span> <span class="o">&lt;=</span> <span class="mi">100</span><span class="p">)</span>
<span class="n">s</span><span class="p">.</span><span class="n">add</span><span class="p">(</span> <span class="n">absx1</span> <span class="o">!=</span> <span class="n">absx2</span><span class="p">)</span>
<span class="n">res</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">check</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>
<span class="k">if</span> <span class="n">res</span> <span class="o">==</span> <span class="n">sat</span><span class="p">:</span>
    <span class="n">m</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">model</span><span class="p">()</span>
    <span class="k">print</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="nb">eval</span><span class="p">(</span><span class="n">absx1</span><span class="p">))</span>
    <span class="k">print</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="nb">eval</span><span class="p">(</span><span class="n">absx2</span><span class="p">))</span>
</code></pre></div></div>

:ET