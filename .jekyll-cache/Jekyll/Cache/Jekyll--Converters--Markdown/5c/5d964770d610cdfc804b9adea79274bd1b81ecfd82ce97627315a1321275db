I")<p>The previous episode is <a href="http://www.philipzucker.com/shit-compiling-categories-using-type-level-programming-haskell/">here </a>.</p>

<p>Summary: I’m trying to use typelevel programming in Haskell to achieve some of the aims of Conal Elliott’s <a href="http://conal.net/papers/compiling-to-categories/">compiling to categories</a> <a href="https://github.com/conal/concat">GHC plugin</a>. The types of highly polymorphic tuple functions are enough to specify the implementation. We aren’t going to be able to piggy-back off of GHC optimizations (a huge downside), but we can reify lambdas into other categories and avoid the scariness of plugins.</p>

<p>The current implementation github source is <a href="https://github.com/philzook58/shit-ccc">here </a></p>

<hr />

<p>JESUS CHRIST.</p>

<p><a href="http://okmij.org/ftp/Haskell/de-typechecker.lhs">http://okmij.org/ftp/Haskell/de-typechecker.lhs</a></p>

<p>Of course, Oleg already did it. This is a file where he builds the implementation of a polymorphic function from the type signature. Instead of tuples, he is focusing on higher order functions with deep nesting of (-&gt;).</p>

<p>The trick that I was missing is in the IsFunction typeclass at the very end, which is only achievable as a Incoherent instances.</p>

<p>I would never have had the courage to use an Incoherent instance if I hadn’t seen a higher authority do it first. It has turned out in my typelevel journey that many instances that I’ve been tempted to make overlapping or incoherent don’t actually have to be, especially with the availability of closed type families. I think you really do need Incoherent in this application because type variables stay polymorphic forever.</p>

<p>To the best of my knowledge, if you need to differentiate between a tuple type (a,b) and an uninstantiated polymorphic value a’ like we do when deconstructing the input type of our lambda, you need to use an Incoherent instance. Since a’ could hypothetically eventually be unified to some (a,b) we should not be able to do different things for the two cases without stepping outside the usual laws of typeclass resolution.</p>

<p>New features of the implementation:</p>

<ul>
  <li>
    <p>The new implementation does not require the V annotation of the input like previous version by using the previously mentioned. This is super cool because now I can throw the stock Prelude.fst into toCcc.</p>
  </li>
  <li>
    <p>I changed how the categorical implementation is built, such that it short circuits with an ‘id’ if a large structure is needed from the input, rather than deconstructing all the way to every piece of the input. Lots of other optimizations would be nice (vital?), but it is a start.</p>
  </li>
  <li>
    <p>I also implemented a FreeCat GADT so that we can see the implementation in ghci.</p>
  </li>
  <li>
    <p>I switched from using Data.Proxy to the type annotations extensions, which is a huge readability win.</p>
  </li>
  <li>
    <p>I added a binary application operator binApp, which is useful for encapsulating categorical literals as infix operators into your lambda expressions.</p>
  </li>
  <li>
    <p>General cleanup, renaming, and refactoring into library files.</p>
  </li>
</ul>

<p>A couple typelevel tricks and comments:</p>

<p>You often have to make helper typeclasses, so don’t be afraid to. If you want something like an if-then-else in your recursion, it is very likely you need a form of the typeclass that has slots for ‘True or ‘False to help you pick the instance.</p>

<p>If possible, you often want the form</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(a~Something) =&gt; MyClass 'True a
</code></pre></div></div>

<p>rather than</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Myclass 'True Something
</code></pre></div></div>

<p>The type inference tends to be better.</p>

<p>Here are some usage examples of toCcc.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>example6 = toCcc (\x -&gt; x) 'a'


example7 = toCcc @FreeCat (\(x, y) -&gt; x)

example8 = toCcc @FreeCat (\(x, y) -&gt; y)
example8andahalf = toCcc' (Proxy :: Proxy FreeCat) (\(x, y) -&gt; y)
example9 = toCcc @FreeCat (\(x, y) -&gt; (y,x)) 
example10 = toCcc @FreeCat (\(( x, z), y) -&gt; (y,x))
swappo = toCcc @FreeCat $ \((x, z), y) -&gt; (x,(z,y))

example11 = toCcc @(-&gt;) $ \(x,y) -&gt; binApp addC x y
example12 = toCcc @(-&gt;) $ \(x,y) -&gt; App negateC x

-- infix synonyms
(+++) = binApp addC
(***) = binApp mulC
example13 = toCcc @(-&gt;) $ \(x,(y,z)) -&gt; x +++ (y *** z)
</code></pre></div></div>

<p>My partially implemented version of some of Conal’s category typeclasses. Should I switch over to using the constrained-categories package?</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{-# LANGUAGE GADTs, StandaloneDeriving, NoImplicitPrelude  #-}

module Cat where
import Control.Category
import Prelude hiding ((.))


class Category k =&gt; Monoidal k where
    par :: k a c -&gt; k b d -&gt; k (a,b) (c,d)

class Monoidal k =&gt; Cartesian k where
    fst :: k (a,b) a 
    snd :: k (a,b) b 
    dup :: k a (a,a) 

fan f g = (par f g) . dup

data FreeCat a b where
    Comp :: FreeCat b c -&gt; FreeCat a b -&gt; FreeCat a c
    Id :: FreeCat a a
    Fst :: FreeCat (a,b) a
    Snd :: FreeCat (a,b) b
    Dup :: FreeCat a (a,a)
    Par :: FreeCat a b -&gt; FreeCat c d -&gt; FreeCat (a,c) (b,d)

deriving instance Show (FreeCat a b)

instance Category FreeCat where
    (.) = Comp
    id = Id

instance Monoidal FreeCat where
    par = Par

instance Cartesian FreeCat where
    fst = Fst
    snd = Snd
    dup = Dup

instance Monoidal (-&gt;) where
    par f g = \(x,y) -&gt; (f x, g y)  

instance Cartesian (-&gt;) where
    fst (x,y) = x
    snd (x,y) = y
    dup x = (x,x)

class NumCat k where
    mulC :: Num a =&gt; k (a,a) a
    negateC :: Num a =&gt; k a a
    addC :: Num a =&gt; k (a,a) a

instance NumCat (-&gt;) where
    mulC = uncurry (*)
    negateC = negate
    addC = uncurry (+)
</code></pre></div></div>

<p>The actual implementation of toCcc</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{-# LANGUAGE DataKinds, 
    AllowAmbiguousTypes, 
    TypeFamilies, 
    TypeOperators, 
    MultiParamTypeClasses, 
    FunctionalDependencies, 
    PolyKinds, 
    FlexibleInstances, 
    UndecidableInstances,
    TypeApplications,
    NoImplicitPrelude,
    ScopedTypeVariables #-}
module CCC (
      CCC
    , App (App)
    , binApp
    , toCcc'
    , toCcc ) where

import Cat
import Data.Proxy 
import Data.Type.Equality (type (==))
import Prelude (Bool(..))
import Control.Category


-- The unfortunate Incoherent instances I need to force polymorphic values
class IsTup a b | a -&gt; b
instance {-# INCOHERENT #-} (c ~ 'True) =&gt; IsTup (a,b) c
instance {-# INCOHERENT #-} (b ~ 'False) =&gt; IsTup a b

data Leaf n = Leaf


data Z
data S a


data App f a = App f a


f $$ x = App f x
binApp f a b = App f (a,b)

class Cartesian k =&gt; CCC k a a' b' | a a' -&gt; b' where
   toCcc :: a -&gt; k a' b'
instance (Tag a,
         Build k a b a' b',
         Cartesian k)
    =&gt; CCC k (a-&gt;b) a' b' where
        toCcc f = build @k @a @b @a' @b' res where  -- build (Proxy :: Proxy labels) (Proxy :: Proxy b) res where
                res = f val 

toCcc' :: CCC k f a' b' =&gt; Proxy k -&gt; f -&gt; k a' b' 
toCcc' _ f = toCcc f

class Tag a where
    val :: a

instance (IsTup a flag, Tag' a Z flag n) =&gt; Tag a where
    val = val' @a @Z @flag

class Tag' a n (flag :: Bool) n'| a n flag -&gt; n' where
    val' :: a

instance (IsTup a flaga,
          IsTup b flagb,
          Tag' a n flaga n'',
          Tag' b n'' flagb n') =&gt; Tag' (a,b) n 'True n'  where
    val' = (val' @a @n @flaga, val' @b @n'' @flagb)

instance (a ~ Leaf n) =&gt; Tag' a n 'False (S n)  where
    val' = Leaf


type family Or a b where
    Or 'True b = 'True
    Or a 'True = 'True
    Or 'False 'False = 'False

class In a b flag | a b -&gt; flag where
instance (
    ((a,b) == c) ~ isc, 
    flag' ~ Or flaga flagb, 
    flag ~ Or flag' isc,
    In a c flaga, 
    In b c flagb) =&gt; In (a,b) c flag
instance ((Leaf n == c) ~ flag) =&gt; In (Leaf n) c flag


class Build k input key a' b' | input key a' -&gt; b' where
   build :: Cartesian k =&gt; key -&gt; k a' b'

instance ( 
    iseq ~ ((a,b) == key),
    In a key isinleft,
    In b key isinright,
    Cond k iseq isinleft isinright (a,b) key a' b'
    ) =&gt; Build k (a,b) key a' b' where
    build key = cond @k @iseq @isinleft @isinright @(a,b) @key @a' key

instance (Leaf n ~ b, a' ~ b') =&gt; Build k (Leaf n) b a' b' where
    build _ = id


class Cond k iseq isinleft isinright input key a b | iseq isinleft isinright input key a -&gt; b where
    cond :: Cartesian k =&gt; key -&gt; k a b
-- Find the key is in the input
instance (a ~ b) =&gt; Cond k 'True x x input key a b where
    cond _ = id
instance (Build k a key a' c', (a',b') ~ ab) =&gt; Cond k 'False 'True x (a,b) key ab c' where -- get those input types inferred baby!
    cond key = (build @k @a @key @a' key) . fst
instance (Build k b key b' c', (a',b') ~ ab) =&gt; Cond k 'False 'False 'True (a,b) key ab c' where
    cond key = (build @k @b @key @b' key) . snd

-- Otherwise destruct on the key
instance (Build k input key1 a' c', 
          Build k input key2 a' d') =&gt; Cond k 'False 'False 'False input (key1,key2) a' (c',d') where
    cond (key1,key2) = fan (build @k @input @key1 @a' key1) (build @k @input @key2 @a' key2)

instance (Build k input key a' b',
    f ~ k b' c')
 =&gt; Cond k 'False 'False 'False input (App f key) a' c' where
    cond (App f key) = f . (build @k @input @key @a' key)

-- Could I replace almost everything with App? A very powerful construct
-- This is a of some relation to defunctionalization like in HList
-- Maybe I should build a typelevel FreeCat and then do compilation passes on it

{-
type family (StripLeaf a) where
    StripLeaf (a,b) = (StripLeaf a, StripLeaf b)
    StripLeaf (Leaf n a) = a 
-}
</code></pre></div></div>

<p><a href="http://philzucker2.nfshost.com/wp-content/uploads/2018/08/Drawing-1.jpeg"><img src="http://philzucker2.nfshost.com/wp-content/uploads/2018/08/Drawing-1.jpeg" alt="drawing-1" /></a></p>

:ET