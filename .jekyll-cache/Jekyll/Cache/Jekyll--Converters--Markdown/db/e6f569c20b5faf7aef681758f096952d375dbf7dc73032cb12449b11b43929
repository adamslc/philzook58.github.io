I"t<p>Donâ€™t know anything about Lua or Torch, and not so much about machine learning. Little project to get going.</p>

<p>Torch is to Lua what Numpy is to python. Never done any lua before, although for a while it was the main language on the esp8266. Torch seems like a popular base for machine learning in competition with theano and tensorflow. Lua is like if python and javascript has a slightly retarded baby.</p>

<p>Thought Iâ€™d give a simple tic tac toe playing guy a go. The structure is play a bunch of totally random games, collect up all the winning games. Then the problem is a classification problem where the categories are the next move (1-9).</p>

<p>Then used the stock nn neural network package to learn on it. Had a tough time finding clear docs. I am unimpressed.</p>

<p>Then use trained neural network to play against the random component.</p>

<p>The win stats increased from ~28% to ~45% (with some fluctuations run to run of a couple percent). Not bad. Especially since going second is disadvantageous. Okay, as I wrote that I realized itâ€™s easy to try flipping that. Going first the stats go from 59% to 69%.</p>

<p>Hmmm. Maybe I should look at draws?</p>

<p>Also, a smart strategy for the moves would be to use the suggested moves according to their rank, not using the top suggested move then if that is invalid using a random move.</p>

<figure class="highlight"><pre><code class="language-lua" data-lang="lua">    <span class="nb">math.randomseed</span><span class="p">(</span><span class="nb">os.time</span><span class="p">())</span>
    
    <span class="k">function</span> <span class="nf">won</span><span class="p">(</span><span class="n">board</span><span class="p">,</span><span class="n">x</span><span class="p">)</span>
      <span class="c1">--diagonals</span>
      <span class="k">if</span> <span class="n">board</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">x</span> <span class="ow">and</span> <span class="n">board</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span><span class="o">==</span><span class="n">x</span> <span class="ow">and</span> <span class="n">board</span><span class="p">[</span><span class="mi">3</span><span class="p">][</span><span class="mi">3</span><span class="p">]</span> <span class="o">==</span> <span class="n">x</span> <span class="k">then</span>
        <span class="k">return</span> <span class="kc">true</span>
      <span class="k">end</span>
    
      <span class="k">if</span> <span class="n">board</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">3</span><span class="p">]</span> <span class="o">==</span> <span class="n">x</span> <span class="ow">and</span> <span class="n">board</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span><span class="o">==</span><span class="n">x</span> <span class="ow">and</span> <span class="n">board</span><span class="p">[</span><span class="mi">3</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">x</span> <span class="k">then</span>
        <span class="k">return</span> <span class="kc">true</span>
      <span class="k">end</span>
    
    <span class="c1">--rows</span>
      <span class="k">for</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span> <span class="k">do</span>
        <span class="k">if</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">3</span><span class="p">]</span> <span class="o">==</span> <span class="n">x</span> <span class="ow">and</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span><span class="o">==</span><span class="n">x</span> <span class="ow">and</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">x</span> <span class="k">then</span>
          <span class="k">return</span> <span class="kc">true</span>
        <span class="k">end</span>
      <span class="k">end</span>
    <span class="c1">--columns</span>
      <span class="k">for</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span> <span class="k">do</span>
        <span class="k">if</span> <span class="n">board</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">x</span> <span class="ow">and</span> <span class="n">board</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="n">x</span> <span class="ow">and</span> <span class="n">board</span><span class="p">[</span><span class="mi">3</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">x</span> <span class="k">then</span>
          <span class="k">return</span> <span class="kc">true</span>
        <span class="k">end</span>
      <span class="k">end</span>
    
      <span class="k">return</span> <span class="kc">false</span>
    
    <span class="k">end</span>
    
    
    <span class="k">function</span> <span class="nf">full</span><span class="p">(</span><span class="n">board</span><span class="p">)</span>
      <span class="k">for</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span> <span class="k">do</span>
        <span class="k">for</span> <span class="n">j</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span> <span class="k">do</span>
          <span class="k">if</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="s1">''</span> <span class="k">then</span>
            <span class="k">return</span> <span class="kc">false</span>
          <span class="k">end</span>
        <span class="k">end</span>
      <span class="k">end</span>
    
      <span class="k">return</span> <span class="kc">true</span>
    <span class="k">end</span>
    
    
    <span class="k">function</span> <span class="nf">mapBoardtoNum</span><span class="p">(</span><span class="n">board</span><span class="p">)</span>
      <span class="n">newboard</span> <span class="o">=</span> <span class="p">{{},{},{}}</span>
      <span class="k">for</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span> <span class="k">do</span>
        <span class="k">for</span> <span class="n">j</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span> <span class="k">do</span>
          <span class="k">if</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="s1">'x'</span> <span class="k">then</span>
            <span class="n">newboard</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
          <span class="k">end</span>
          <span class="k">if</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="s1">''</span> <span class="k">then</span>
            <span class="n">newboard</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
          <span class="k">end</span>
          <span class="k">if</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="s1">'o'</span> <span class="k">then</span>
            <span class="n">newboard</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
          <span class="k">end</span>
        <span class="k">end</span>
      <span class="k">end</span>
      <span class="k">return</span> <span class="n">newboard</span>
    <span class="k">end</span>
    
    <span class="cm">--[[
    print(won({
    {'x','',''},
    {'x','o',''},
    {'x','o',''}}, 'o'))
    ]]</span>
    
    
    <span class="n">mymoves</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">myboards</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">wins</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">gamenum</span> <span class="o">=</span> <span class="mi">10000</span>
    <span class="k">for</span> <span class="n">k</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">gamenum</span> <span class="k">do</span>
    
      <span class="n">board</span> <span class="o">=</span> <span class="p">{{</span><span class="s1">''</span><span class="p">,</span><span class="s1">''</span><span class="p">,</span><span class="s1">''</span><span class="p">},</span>
      <span class="p">{</span><span class="s1">''</span><span class="p">,</span><span class="s1">''</span><span class="p">,</span><span class="s1">''</span><span class="p">},</span>
      <span class="p">{</span><span class="s1">''</span><span class="p">,</span><span class="s1">''</span><span class="p">,</span><span class="s1">''</span><span class="p">}}</span>
    
      <span class="n">move</span> <span class="o">=</span> <span class="s1">'o'</span>
    
      <span class="n">game</span> <span class="o">=</span> <span class="p">{}</span>
      <span class="n">choices</span> <span class="o">=</span> <span class="p">{}</span>
    
      <span class="n">turn</span> <span class="o">=</span> <span class="mi">1</span>
    
      <span class="k">while</span> <span class="ow">not</span> <span class="n">won</span><span class="p">(</span><span class="n">board</span><span class="p">,</span><span class="s1">'x'</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">won</span><span class="p">(</span><span class="n">board</span><span class="p">,</span><span class="s1">'o'</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">full</span><span class="p">(</span><span class="n">board</span><span class="p">)</span> <span class="k">do</span>
    
        <span class="k">if</span> <span class="n">move</span> <span class="o">==</span> <span class="s1">'x'</span> <span class="k">then</span>
          <span class="n">move</span> <span class="o">=</span> <span class="s1">'o'</span>
        <span class="k">elseif</span> <span class="n">move</span> <span class="o">==</span> <span class="s1">'o'</span> <span class="k">then</span>
          <span class="n">move</span> <span class="o">=</span> <span class="s1">'x'</span>
        <span class="k">end</span>
    
        <span class="k">repeat</span>
          <span class="n">i</span> <span class="o">=</span> <span class="nb">math.random</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
          <span class="n">j</span> <span class="o">=</span> <span class="nb">math.random</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
        <span class="k">until</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="s1">''</span>
    
        <span class="k">if</span> <span class="n">move</span> <span class="o">==</span> <span class="s1">'x'</span> <span class="k">then</span>
          <span class="n">game</span><span class="p">[</span><span class="n">turn</span><span class="p">]</span> <span class="o">=</span> <span class="n">mapBoardtoNum</span><span class="p">(</span><span class="n">board</span><span class="p">)</span>
          <span class="n">choices</span><span class="p">[</span><span class="n">turn</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span><span class="mi">1</span> <span class="o">+</span> <span class="mi">3</span> <span class="o">*</span> <span class="p">(</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span><span class="mi">1</span>
          <span class="n">turn</span> <span class="o">=</span> <span class="n">turn</span> <span class="o">+</span> <span class="mi">1</span>
      <span class="k">end</span>
        <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">move</span>
    
      <span class="k">end</span>
    
      <span class="k">if</span> <span class="n">won</span><span class="p">(</span><span class="n">board</span><span class="p">,</span><span class="s1">'x'</span><span class="p">)</span> <span class="k">then</span>
        <span class="n">wins</span> <span class="o">=</span> <span class="n">wins</span> <span class="o">+</span><span class="mi">1</span>
        <span class="k">for</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span><span class="o">#</span><span class="n">game</span> <span class="k">do</span>
          <span class="nb">table.insert</span><span class="p">(</span><span class="n">myboards</span><span class="p">,</span> <span class="n">game</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
          <span class="nb">table.insert</span><span class="p">(</span><span class="n">mymoves</span><span class="p">,</span> <span class="n">choices</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
        <span class="k">end</span>
      <span class="k">end</span>
    
    <span class="k">end</span>
    
    <span class="c1">--print(mymoves)</span>
    <span class="c1">--print(#myboards)</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">'won '</span> <span class="o">..</span> <span class="n">wins</span> <span class="o">..</span><span class="s1">' out of '</span> <span class="o">..</span> <span class="n">gamenum</span><span class="p">)</span>
    
    <span class="n">training</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="cm">--[[
    training.data = torch.Tensor(myboards)
    training.labels = torch.Tensor(mymoves)
    training.size = function() return (#mymoves) end
    ]]</span>
    
    <span class="n">training</span><span class="p">.</span><span class="n">size</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span> <span class="k">return</span> <span class="p">(</span><span class="o">#</span><span class="n">mymoves</span><span class="p">)</span> <span class="k">end</span>
    <span class="k">for</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">training</span><span class="p">:</span><span class="n">size</span><span class="p">()</span> <span class="k">do</span>
      <span class="n">training</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="n">torch</span><span class="p">.</span><span class="n">Tensor</span><span class="p">(</span><span class="n">myboards</span><span class="p">[</span><span class="n">i</span><span class="p">]),</span> <span class="n">torch</span><span class="p">.</span><span class="n">Tensor</span><span class="p">({</span><span class="n">mymoves</span><span class="p">[</span><span class="n">i</span><span class="p">]})}</span>
    <span class="k">end</span>
    
    <span class="n">ninputs</span> <span class="o">=</span> <span class="mi">9</span>
    <span class="n">nhiddens</span> <span class="o">=</span> <span class="mi">30</span>
    <span class="n">noutputs</span> <span class="o">=</span> <span class="mi">9</span>
    <span class="nb">require</span> <span class="s1">'nn'</span>
    <span class="n">model</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Sequential</span><span class="p">()</span>
    <span class="n">model</span><span class="p">:</span><span class="n">add</span><span class="p">(</span><span class="n">nn</span><span class="p">.</span><span class="n">Reshape</span><span class="p">(</span><span class="n">ninputs</span><span class="p">))</span>
    <span class="n">model</span><span class="p">:</span><span class="n">add</span><span class="p">(</span><span class="n">nn</span><span class="p">.</span><span class="n">Linear</span><span class="p">(</span><span class="n">ninputs</span><span class="p">,</span><span class="n">nhiddens</span><span class="p">))</span>
    <span class="n">model</span><span class="p">:</span><span class="n">add</span><span class="p">(</span><span class="n">nn</span><span class="p">.</span><span class="n">Tanh</span><span class="p">())</span>
    <span class="n">model</span><span class="p">:</span><span class="n">add</span><span class="p">(</span><span class="n">nn</span><span class="p">.</span><span class="n">Linear</span><span class="p">(</span><span class="n">nhiddens</span><span class="p">,</span><span class="n">noutputs</span><span class="p">))</span>
    <span class="n">model</span><span class="p">:</span><span class="n">add</span><span class="p">(</span> <span class="n">nn</span><span class="p">.</span><span class="n">LogSoftMax</span><span class="p">()</span> <span class="p">)</span>
    
    <span class="n">criterion</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">ClassNLLCriterion</span><span class="p">()</span>
    
    
    <span class="n">trainer</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">StochasticGradient</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">criterion</span><span class="p">)</span>
    <span class="n">trainer</span><span class="p">.</span><span class="n">learningRate</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="mi">01</span>
    <span class="n">trainer</span><span class="p">.</span><span class="n">maxIteration</span> <span class="o">=</span> <span class="mi">7</span>
    
    <span class="n">trainer</span><span class="p">:</span><span class="n">train</span><span class="p">(</span><span class="n">training</span><span class="p">)</span>
    
    
    
    
    <span class="cm">--[[
    print(board)
    print(won(board,'o'))
    print(won(board,'x'))
    print(choices)
    print(game[1])
    ]]</span>
    
    
    <span class="n">board</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">{</span><span class="s1">'x'</span><span class="p">,</span><span class="s1">'o'</span><span class="p">,</span><span class="s1">''</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">'x'</span><span class="p">,</span><span class="s1">'o'</span><span class="p">,</span><span class="s1">''</span><span class="p">},</span>
    <span class="p">{</span><span class="s1">'x'</span><span class="p">,</span><span class="s1">'o'</span><span class="p">,</span><span class="s1">''</span><span class="p">}</span>
    <span class="p">}</span>
    
    <span class="n">logprobs</span><span class="o">=</span> <span class="n">model</span><span class="p">:</span><span class="n">forward</span><span class="p">(</span><span class="n">torch</span><span class="p">.</span><span class="n">Tensor</span><span class="p">(</span><span class="n">mapBoardtoNum</span><span class="p">(</span><span class="n">board</span><span class="p">)))</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">logprobs</span><span class="p">)</span>
    <span class="n">max</span><span class="p">,</span> <span class="n">pred</span> <span class="o">=</span><span class="n">torch</span><span class="p">.</span><span class="n">max</span><span class="p">(</span><span class="n">logprobs</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">max</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">pred</span><span class="p">)</span>
    <span class="cm">--[[
    -- Basic format
    {
    {'x','o',''},
    {'x','o',''},
    {'x','o',''}
    }
    ]]</span>
    
    <span class="nb">print</span><span class="p">(</span><span class="s1">'random won '</span> <span class="o">..</span> <span class="n">wins</span> <span class="o">..</span><span class="s1">' out of '</span> <span class="o">..</span> <span class="n">gamenum</span><span class="p">)</span>
    
    
    <span class="n">mymoves</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">myboards</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">wins</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">k</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">gamenum</span> <span class="k">do</span>
    
      <span class="n">board</span> <span class="o">=</span> <span class="p">{{</span><span class="s1">''</span><span class="p">,</span><span class="s1">''</span><span class="p">,</span><span class="s1">''</span><span class="p">},</span>
      <span class="p">{</span><span class="s1">''</span><span class="p">,</span><span class="s1">''</span><span class="p">,</span><span class="s1">''</span><span class="p">},</span>
      <span class="p">{</span><span class="s1">''</span><span class="p">,</span><span class="s1">''</span><span class="p">,</span><span class="s1">''</span><span class="p">}}</span>
    
      <span class="n">move</span> <span class="o">=</span> <span class="s1">'o'</span>
    
      <span class="n">game</span> <span class="o">=</span> <span class="p">{}</span>
      <span class="n">choices</span> <span class="o">=</span> <span class="p">{}</span>
    
      <span class="n">turn</span> <span class="o">=</span> <span class="mi">1</span>
    
      <span class="k">while</span> <span class="ow">not</span> <span class="n">won</span><span class="p">(</span><span class="n">board</span><span class="p">,</span><span class="s1">'x'</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">won</span><span class="p">(</span><span class="n">board</span><span class="p">,</span><span class="s1">'o'</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">full</span><span class="p">(</span><span class="n">board</span><span class="p">)</span> <span class="k">do</span>
        <span class="c1">--print('yo')</span>
        <span class="k">if</span> <span class="n">move</span> <span class="o">==</span> <span class="s1">'x'</span> <span class="k">then</span>
          <span class="n">move</span> <span class="o">=</span> <span class="s1">'o'</span>
          <span class="k">repeat</span>
            <span class="n">i</span> <span class="o">=</span> <span class="nb">math.random</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
            <span class="n">j</span> <span class="o">=</span> <span class="nb">math.random</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
          <span class="k">until</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="s1">''</span>
          <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">move</span>
    
    
        <span class="k">elseif</span> <span class="n">move</span> <span class="o">==</span> <span class="s1">'o'</span> <span class="k">then</span>
          <span class="n">move</span> <span class="o">=</span> <span class="s1">'x'</span>
          <span class="c1">--print(board)</span>
          <span class="c1">--print(torch.Tensor(mapBoardtoNum(board)))</span>
          <span class="kd">local</span> <span class="n">probs</span> <span class="o">=</span> <span class="n">model</span><span class="p">:</span><span class="n">forward</span><span class="p">(</span><span class="n">torch</span><span class="p">.</span><span class="n">Tensor</span><span class="p">(</span><span class="n">mapBoardtoNum</span><span class="p">(</span><span class="n">board</span><span class="p">)))</span>
          <span class="n">maxs</span><span class="p">,</span> <span class="n">pred</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">max</span><span class="p">(</span><span class="n">probs</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
          <span class="c1">--i -1 + 3 * (j-1) +1</span>
          <span class="n">pred</span> <span class="o">=</span> <span class="n">pred</span> <span class="o">-</span> <span class="mi">1</span>
          <span class="n">i</span> <span class="o">=</span> <span class="n">pred</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">+</span> <span class="mi">1</span>
          <span class="n">j</span> <span class="o">=</span> <span class="p">(</span><span class="n">pred</span> <span class="o">-</span> <span class="n">pred</span><span class="o">%</span><span class="mi">3</span><span class="p">)</span> <span class="o">/</span> <span class="mi">3</span> <span class="o">+</span> <span class="mi">1</span>
          <span class="n">i</span> <span class="o">=</span> <span class="n">i</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
          <span class="n">j</span> <span class="o">=</span> <span class="n">j</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
          <span class="c1">--print(i[1])</span>
          <span class="c1">--print(j)</span>
          <span class="c1">--print(board)</span>
          <span class="c1">--print(board[i][j])</span>
          <span class="k">if</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="s1">''</span> <span class="k">then</span>
            <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">move</span>
          <span class="k">else</span>
              <span class="k">repeat</span>
                <span class="n">i</span> <span class="o">=</span> <span class="nb">math.random</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
                <span class="n">j</span> <span class="o">=</span> <span class="nb">math.random</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
              <span class="k">until</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="s1">''</span>
              <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">move</span>
          <span class="k">end</span>
    
    
    
        <span class="k">end</span>
    
      <span class="k">end</span>
    
      <span class="k">if</span> <span class="n">won</span><span class="p">(</span><span class="n">board</span><span class="p">,</span><span class="s1">'x'</span><span class="p">)</span> <span class="k">then</span>
        <span class="n">wins</span> <span class="o">=</span> <span class="n">wins</span> <span class="o">+</span><span class="mi">1</span>
      <span class="k">end</span>
    
    <span class="k">end</span>
    
    <span class="nb">print</span><span class="p">(</span><span class="s1">'learned won '</span> <span class="o">..</span> <span class="n">wins</span> <span class="o">..</span><span class="s1">' out of '</span> <span class="o">..</span> <span class="n">gamenum</span><span class="p">)</span>
    </code></pre></figure>

:ET